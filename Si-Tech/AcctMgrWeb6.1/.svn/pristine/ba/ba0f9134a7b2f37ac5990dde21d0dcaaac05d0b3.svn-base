package com.sitech.acctmgr.atom.impl.pay;

import static org.apache.commons.collections.MapUtils.getLongValue;
import static org.apache.commons.collections.MapUtils.safeAddToMap;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.sitech.acctmgr.atom.busi.pay.inter.IPayManage;
import com.sitech.acctmgr.atom.busi.pay.inter.IPreOrder;
import com.sitech.acctmgr.atom.busi.pay.inter.IWriteOffer;
import com.sitech.acctmgr.atom.busi.query.inter.IOweBill;
import com.sitech.acctmgr.atom.busi.query.inter.IRemainFee;
import com.sitech.acctmgr.atom.domains.account.AccountListEntity;
import com.sitech.acctmgr.atom.domains.account.ContractInfoEntity;
import com.sitech.acctmgr.atom.domains.account.CsAccountRelEntity;
import com.sitech.acctmgr.atom.domains.base.BankEntity;
import com.sitech.acctmgr.atom.domains.base.ChngroupRelEntity;
import com.sitech.acctmgr.atom.domains.base.LoginEntity;
import com.sitech.acctmgr.atom.domains.pay.AccountPayedEntity;
import com.sitech.acctmgr.atom.domains.pay.ChequeEntity;
import com.sitech.acctmgr.atom.domains.pay.PayBookEntity;
import com.sitech.acctmgr.atom.domains.pay.PayUserBaseEntity;
import com.sitech.acctmgr.atom.domains.record.LoginOprEntity;
import com.sitech.acctmgr.atom.domains.user.GroupchgInfoEntity;
import com.sitech.acctmgr.atom.domains.user.UserBrandEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.dto.pay.S8020AccountInDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020AccountOutDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020BankCheckInDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020BankCheckOutDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020CfmInDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020CfmOutDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020InitInDTO;
import com.sitech.acctmgr.atom.dto.pay.S8020InitOutDTO;
import com.sitech.acctmgr.atom.entity.inter.IAccount;
import com.sitech.acctmgr.atom.entity.inter.IBalance;
import com.sitech.acctmgr.atom.entity.inter.IBase;
import com.sitech.acctmgr.atom.entity.inter.ICheque;
import com.sitech.acctmgr.atom.entity.inter.IControl;
import com.sitech.acctmgr.atom.entity.inter.IGroup;
import com.sitech.acctmgr.atom.entity.inter.IInvoice;
import com.sitech.acctmgr.atom.entity.inter.ILogin;
import com.sitech.acctmgr.atom.entity.inter.IRecord;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.common.AcctMgrError;
import com.sitech.acctmgr.common.constant.PayBusiConst;
import com.sitech.acctmgr.inter.pay.I8020Ao;
import com.sitech.common.utils.StringUtils;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;

/**
 * <p>
 * Title:省内一点支付缴费
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2014
 * </p>
 * <p>
 * Company: SI-TECH
 * </p>
 * 
 * @author
 * @version 1.0
 */
@ParamTypes({
	@ParamType(c = S8020BankCheckInDTO.class, oc = S8020BankCheckOutDTO.class, m = "getBankOrCheck"),
	@ParamType(c = S8020AccountInDTO.class, oc=S8020AccountOutDTO.class,m = "getAccoutByZJ"),
	@ParamType(c = S8020InitInDTO.class,oc=S8020InitOutDTO.class, m = "init"),
	@ParamType(c = S8020CfmInDTO.class,oc=S8020CfmOutDTO.class, m = "cfm")
	})
public class S8020 extends AcctMgrBaseService implements I8020Ao {

	private IAccount 	account;
	private IUser 		user;
	private ILogin 		login;
	private IControl 	control;
	private ICheque 	cheque;
	private IOweBill 	oweBill;
	private IBalance 	balance;
	private IRecord 	record;
	private IGroup 		group;
	private IPayManage 	payManage;
	private IRemainFee 	reFee;
	private IWriteOffer writeOffer;
	private IPreOrder	preOrder;
	private IBase		base;
	private IInvoice	invoice;
	
	@Override
	public OutDTO getAccoutByZJ(InDTO inParam) {

		S8020AccountInDTO inDto = (S8020AccountInDTO) inParam;
		log.error("-> 8020Account_in" + inDto.getMbean());

		// 证件号密码DES解密
/*		String iDICCID = "";
		try {
			iDICCID = CodecUtil.decodeDESForChannel(inDTO.getIdICCID(), "11");
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		//log.info("-----> sIDICCIDJM = " + inDTO.getIdICCID() + ", sIDICCID = " + iDICCID);

		// 身份证加密后查询
		String encrypIDICCID = control.pubEncryptData(inDto.getIdICCID(), 0);
		log.error("------> 加密后证件 sEncrypIDICCID ：" + encrypIDICCID);

		// 用身份证查询账户列表
		List<AccountListEntity> listCon = account.getAccountByIDICCID(encrypIDICCID);
		List<AccountListEntity> outList = new ArrayList<AccountListEntity>();
		log.debug("全部账户：" + listCon.toString());
		for(AccountListEntity conTmp : listCon){
			
			if(conTmp.getContracttType().equals(PayBusiConst.YDZF_CONTRACTTYPE_STRING)){
				
				outList.add(conTmp);
			}
		}

		S8020AccountOutDTO outDto = new S8020AccountOutDTO();
		outDto.setListAccount(outList);
		outDto.setAccountLen(outList.size());

		log.error("-> 8020Account_out" + outDto.toJson());
		return outDto;
	}

	@Override
	public OutDTO getBankOrCheck(InDTO inParam) {

		List<BankEntity> bankList = new ArrayList<BankEntity>();
		long lCheckPrepay = 0;

		S8020BankCheckInDTO inDto = (S8020BankCheckInDTO) inParam;
		log.error("-> 8020Bank_in" + inDto.getMbean());

		String sCheckFlag = inDto.getCheckFlag();

		if ("N".equals(sCheckFlag)) {
			/* 获取银行信息 */
			if (StringUtils.isEmptyOrNull(inDto.getBankCode()) && StringUtils.isEmptyOrNull(inDto.getBankName())) {
				log.error("------>请输入银行代码或名称");
				throw new BusiException(AcctMgrError.getErrorCode("8020", "00001"), " 输入参数错误:请输入银行代码或名称");
			}

			ChngroupRelEntity groupRelEntity = group.getRegionDistinct(inDto.getGroupId(), "3", inDto.getProvinceId());
			
			bankList = base.getBankInfo(groupRelEntity.getParentGroupId(), inDto.getProvinceId(), inDto.getBankCode(), inDto.getBankName());

		} else if ("Y".equals(sCheckFlag)) {

			/* 获取支票余额 */
			if (StringUtils.isEmptyOrNull(inDto.getCheckNo())) {
				log.error("------>请输入支票代码");
				throw new BusiException(AcctMgrError.getErrorCode("8020", "00004"), " 输入参数错误:请输入支票代码!");
			}
			log.debug("--JJJ>" + inDto.getBankCode() + "," + inDto.getCheckNo());
			lCheckPrepay = cheque.getCheckPrepay(inDto.getBankCode(),
					inDto.getCheckNo());
		}

		S8020BankCheckOutDTO outDto = new S8020BankCheckOutDTO();
		outDto.setCheckPrepay(lCheckPrepay);
		outDto.setBankList(bankList);
		outDto.setBankLen(bankList.size());

		log.error("-> 8020Bank_out" + outDto.toJson());
		return outDto;
	}

	/*
	 * @see
	 * com.sitech.acctmgr.inter.pay.I8020Ao#init(com.sitech.jcfx.dt.in.InDTO)
	 */
	@Override
	public OutDTO init(InDTO inParam) {

		S8020InitInDTO inDTO = (S8020InitInDTO) inParam;
		log.error("------8020Init_in：" + inDTO.getMbean());
		long contractNo = inDTO.getContractNo();

		Map<String, Object> inMapTmp = null;
		Map<String, Object> outMapTmp = null;
		
		initCheck(inDTO.getContractNo());

		// 二级账户与支付账户在同一个库列表
		List<AccountPayedEntity> relOutList = new ArrayList<AccountPayedEntity>();
		long allTotal = 0; // 支付账户合计应支付金额
		long prepayFee = 0; // 支付账户预存
		long allDelayFee = 0;
		// 获取省内一点支付账户代付二级账户列表
		List<CsAccountRelEntity> listRelCon = account.getAccountRelList(contractNo,null, "1");

		for (CsAccountRelEntity accountRelEntity : listRelCon) {

			long relContractNo = accountRelEntity.getRelContractNo();
			long payValue = accountRelEntity.getPayValue();
			String acctRelType = accountRelEntity.getAcctRelType();

			log.info("------>init 处理支付账户[" + contractNo + "]下的被支付账户["
					+ relContractNo + "]");

			ContractInfoEntity relConEntity = account.getConInfo(relContractNo);
			GroupchgInfoEntity chgGroupInfo = group.getChgGroup(null, null, contractNo);
			relConEntity.setGroupId(chgGroupInfo.getGroupId());
			String relGroupId = chgGroupInfo.getGroupId();

			// 查询账户地市归属信息
			ChngroupRelEntity groupEntity = group.getRegionDistinct(relConEntity.getGroupId(), "2", inDTO.getProvinceId());
			String relRegionCode = groupEntity.getRegionCode();

			// 获取被支付账户默认用户基本信息
			UserInfoEntity userEntity = user.getUserEntity(null, null, relContractNo, true);
			UserBrandEntity userBrand = user.getUserBrandRel(userEntity.getIdNo());
			String relPhoneNo = userEntity.getPhoneNo();
			long relIdNo = userEntity.getIdNo();
			String relBrandId = userBrand.getBrandId();

			// 被支付账户预存（非专款总预存）
			outMapTmp = balance.getConMsgFee(relContractNo);
			long relPrepay = getLongValue(outMapTmp, "PREPAY_FEE");
			// 查询被支付账户欠费、滞纳金
			outMapTmp = oweBill.getOweFeeInfo(relContractNo);
			long relOweFee = getLongValue(outMapTmp, "OWE_FEE");
			long relDelayFee = getLongValue(outMapTmp, "DELAY_FEE");

			String payName = "";
			long relFixFee = 0; // 支付金额

			// 判断支付方式
			if (PayBusiConst.ACCT_REL_TYPE_FIX.equals(acctRelType)) { // 定额交费

				payName = "定额交费";
				relFixFee = payValue;
			}
			if (PayBusiConst.ACCT_REL_TYPE_ALL.equals(acctRelType)) { // 全额交费

				payName = "全额交费";
				relFixFee = relOweFee + relDelayFee;
				if (relPrepay > relFixFee) {
					relFixFee = 0;
				} else {
					relFixFee = relFixFee - relPrepay;
				}
				// 全额缴费的滞纳金才会优惠
				allDelayFee = allDelayFee + relDelayFee;
			}
			allTotal = allTotal + relFixFee;

			Map<String, Object> relOutMap = new HashMap<String, Object>();
			safeAddToMap(relOutMap, "CONTRACT_NO", relContractNo);
			safeAddToMap(relOutMap, "PREPAY_FEE", relPrepay); // 预存
			safeAddToMap(relOutMap, "OWE_FEE", relOweFee); // 欠费
			safeAddToMap(relOutMap, "PAY_NAME", payName); // 缴费方式
			safeAddToMap(relOutMap, "FIX_FEE", relFixFee); // 支付金额
			safeAddToMap(relOutMap, "DELAY_FEE", relDelayFee); // 滞纳金
			safeAddToMap(relOutMap, "CONTRACT_NAME", relConEntity.getBlurContractName()); // 账户名称
			safeAddToMap(relOutMap, "REGION_CODE", relRegionCode); // 账户名称
			safeAddToMap(relOutMap, "PHONE_NO", relPhoneNo);
			safeAddToMap(relOutMap, "ID_NO", relIdNo);
			safeAddToMap(relOutMap, "BRAND_ID", relBrandId);
			safeAddToMap(relOutMap, "GROUP_ID", relGroupId);
			String jsonRel = JSON.toJSONString(relOutMap);

			relOutList.add(JSON.parseObject(jsonRel, AccountPayedEntity.class));

		}

		// 查询支付账户预存
		outMapTmp = balance.getConMsgFee(contractNo);
		prepayFee = getLongValue(outMapTmp, "PREPAY_FEE");
		
		allTotal = allTotal - prepayFee;
		if(allTotal < 0){
			allTotal = 0;
		}

		S8020InitOutDTO outDTO = new S8020InitOutDTO();
		outDTO.setPrepayFee(prepayFee);
		outDTO.setAllTotal(allTotal);
		outDTO.setAllDelayfee(allDelayFee);
		outDTO.setListContract(relOutList);
		outDTO.setContractLen(relOutList.size());

		log.error("------> 8020Init_out：" + outDTO.toJson());

		return outDTO;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sitech.acctmgr.inter.pay.I8020Ao#cfm(com.sitech.jcfx.dt.in.InDTO)
	 */
	@Override
	public OutDTO cfm(InDTO inParam) {

		S8020CfmInDTO inDto = (S8020CfmInDTO) inParam;
		if (StringUtils.isEmptyOrNull(inDto.getGroupId())) {
			LoginEntity loginEntity = login.getLoginInfo(inDto.getLoginNo(), inDto.getProvinceId());
			inDto.setGroupId(loginEntity.getGroupId());
		}

		log.error("------8020Cfm_in：" + inDto.getMbean());

		Map<String, Object> inMapTmp = null;
		String payMethod;
		if (PayBusiConst.PAY_TYPE_CHECK.equals(inDto.getPayType())) {
			payMethod = PayBusiConst.PAY_METHOD_CHECK;
		} else {
			payMethod = PayBusiConst.PAY_METHOD_DEFAULT;
		}

		// 取当前账务日期
		String sCurTime = control.getSysDate().get("CUR_TIME").toString();
		String sCurYm = sCurTime.substring(0, 6);
		int totalDate = Integer.parseInt(sCurTime.substring(0, 8));
		
		long contractNo = inDto.getContractNo();
		/* 缴费确认必要校验 */
		cfmCheck(inDto.getOpCode(), inDto.getPayMoney() ,contractNo);

		String phoneNo = getPayPhone(inDto.getContractNo());
		

		// 3、获取缴费确认需要基本资料
		PayUserBaseEntity payUserBase = getCfmBaseInfo(phoneNo, contractNo, inDto.getProvinceId());
		payUserBase.setPhoneFlag(false);

		long paySn = control.getSequence("SEQ_PAY_SN");
		PayBookEntity bookIn = new PayBookEntity();
		bookIn.setPaySn(paySn);
		bookIn.setTotalDate(totalDate);
		bookIn.setPayPath(PayBusiConst.OWNPATH);
		bookIn.setPayMethod(payMethod);
		bookIn.setPayType(inDto.getPayType());
		bookIn.setPayFee(inDto.getPayMoney());
		bookIn.setStatus("0");
		bookIn.setBeginTime(sCurTime);
		bookIn.setPrintFlag("");
		bookIn.setYearMonth(Long.parseLong(sCurYm));
		bookIn.setLoginNo(inDto.getLoginNo());
		bookIn.setGroupId(inDto.getGroupId());
		bookIn.setOpCode(inDto.getOpCode());
		bookIn.setOpNote(inDto.getPayNote());

		// 给支付账户增加预存
		payManage.saveInBook(inDto.getHeader(), payUserBase, bookIn);

		// 4.入payment表
		record.savePayMent(payUserBase, bookIn);

		if (PayBusiConst.PAY_TYPE_CHECK.equals(inDto.getPayType())) {
			// 扣除支票金额，记录支票记录表
			ChequeEntity cheque1 = new ChequeEntity(inDto.getBankCode(),
					inDto.getCheckNo());
			cheque.doReduceCheck(cheque1, bookIn);
		}
		
		/***
		 * 预开发票回收
		 */
		if (inDto.getIsDoweInv() != null && inDto.getIsDoweInv().equals("R")) {

			if (!record.isPreInv(contractNo, inDto.getPreloginAccept(), inDto.getPayMoney())) {

				throw new BusiException(AcctMgrError.getErrorCode("8000", "00024"), "没有预开发票记录!");
			}

			Map<String, Object> inMap = new HashMap<String, Object>();
			inMap.put("LOGIN_NO", inDto.getLoginNo());
			inMap.put("LOGIN_ACCPET", inDto.getPreloginAccept());
			inMap.put("CONTRACT_NO", inDto.getContractNo());
			inMap.put("PRINT_SN", inDto.getPreloginAccept());
			inMap.put("LOGIN_NO", inDto.getLoginNo());
			inMap.put("OP_CODE", inDto.getOpCode());
			inMap.put("HEADER", inDto.getHeader());
			invoice.bakGrpPreInv(inMap);

			// inMap = new HashMap<String, Object>();
			// inMap.put("LOGIN_ACCPET", inDto.getPreloginAccept());
			// inMap.put("CONTRACT_NO", inDto.getContractNo());
			inMap.put("STATE", "r");
			inMap.put("PAY_SN_UPDATE", paySn);
			invoice.updateGrpPrintState(inMap);

			// 更新bal_invprint_info表中的pay_sn字段
			inMap = new HashMap<String, Object>();
			inMap.put("CONTRACT_NO", inDto.getContractNo());
			inMap.put("PRINT_SN", inDto.getPreloginAccept());
			inMap.put("PAY_SN", paySn);
			inMap.put("BILL_CYCLE", sCurYm);
			invoice.upPaysn(inMap);
		}

		// 记录营业员操作日志
		LoginOprEntity loginOprEn = new LoginOprEntity();
		loginOprEn.setLoginNo(inDto.getLoginNo());
		loginOprEn.setLoginGroup(inDto.getGroupId());
		loginOprEn.setLoginSn(paySn);
		loginOprEn.setIdNo(payUserBase.getIdNo());
		loginOprEn.setPhoneNo(phoneNo);
		loginOprEn.setBrandId(payUserBase.getBrandId());
		loginOprEn.setTotalDate(totalDate);
		loginOprEn.setPayType(inDto.getPayType());
		loginOprEn.setPayFee(inDto.getPayMoney());
		loginOprEn.setOpCode(inDto.getOpCode());
		loginOprEn.setRemark(inDto.getPayNote());
		record.saveLoginOpr(loginOprEn);

		// 向其他系统同步数据（目前：CRM营业日报、BOSS报表、统一接触）
		List<Map<String, Object>> keysList = new ArrayList<Map<String, Object>>(); // 同步报表库数据List
		Map<String, Object> paymentKey = new HashMap<String, Object>();
		paymentKey.put("YEAR_MONTH", sCurTime);
		paymentKey.put("CONTRACT_NO", contractNo);
		paymentKey.put("PAY_SN", paySn);
		paymentKey.put("ID_NO", payUserBase.getIdNo());
		paymentKey.put("PAY_TYPE", inDto.getPayType());
		paymentKey.put("TABLE_NAME", "BAL_PAYMENT_INFO");
		paymentKey.put("UPDATE_TYPE", "I");
		keysList.add(paymentKey);

		inMapTmp = new HashMap<String, Object>();
		inMapTmp.put("PAY_SN", paySn);
		inMapTmp.put("LOGIN_NO", inDto.getLoginNo());
		inMapTmp.put("GROUP_ID", inDto.getGroupId());
		inMapTmp.put("OP_CODE", inDto.getOpCode());
		inMapTmp.put("PHONE_NO", phoneNo);
		inMapTmp.put("BRAND_ID", payUserBase.getBrandId());
		inMapTmp.put("BACK_FLAG", "0");
		inMapTmp.put("OLD_ACCEPT", paySn);
		inMapTmp.put("OP_TIME", sCurTime);
		inMapTmp.put("OP_NOTE", inDto.getPayNote());
		inMapTmp.put("ACTION_ID", "1001");
		inMapTmp.put("KEYS_LIST", keysList);
		inMapTmp.put("REGION_ID", payUserBase.getRegionId());
		inMapTmp.put("CUST_ID_TYPE", "3"); // 0客户ID;1-服务号码;2-用户ID;3-账户ID
		inMapTmp.put("CUST_ID_VALUE", String.valueOf(contractNo));
		inMapTmp.put("Header", inDto.getHeader());
		preOrder.sendData2(inMapTmp);

		S8020CfmOutDTO outDTO = new S8020CfmOutDTO();
		outDTO.setPayAccept(paySn);
		outDTO.setTotalDate(String.valueOf(totalDate));
		log.error("------> 8020Cfm_out：" + outDTO.toJson());
		return outDTO;
	}

	/**
	 * 名称：缴费确认必有校验
	 * 
	 * @param opCode
	 * @param payMoney
	 */
	protected void cfmCheck(String opCode, long payMoney,long contractNo) {

		/* 缴费限额 */
		long payLimitFee = control.getLimitFee(opCode, 0L, "SNYDZF");
		if (payMoney > payLimitFee) {

			log.info("省内一点支付账户缴费 [ " + payMoney / 100 + " ]元，超过限额 [ " + payLimitFee / 100 + " ]元！");
			throw new BusiException(AcctMgrError.getErrorCode(opCode, "00002"), "省内一点支付账户缴费[ " + payMoney / 100 + " ]元，超过限额 [ " + payLimitFee / 100
					+ " ]元！");
		}
		
		String flag = invoice.isPreInv(contractNo);
		if("a".equals(flag)|| "b".equals(flag)){
			log.info("账户号码："+contractNo + "该账户有预开发票且没有回收，请先做预开发票回收");
			throw new BusiException(AcctMgrError.getErrorCode(opCode, "00030"), "该账户有预开发票且没有回收，请先做预开发票回收");
		}
	}

	/**
	 * 功能：获取缴费号码, 通用规则，获取默认用户
	 */
	protected String getPayPhone(Long contractNo) {

		UserInfoEntity userEntity = user.getUserEntity(null, null, contractNo,false);

		if(userEntity != null){
			return userEntity.getPhoneNo();
		}else{
			return PayBusiConst.DEFAULT_PHONE;
		}
	}

	private PayUserBaseEntity getCfmBaseInfo(String phoneNo, long contractNo, String provinceId) {

		// Map<String, Object> userMap = null;
		UserInfoEntity userInfo = null;
		String brandId = "XX";
		long idNo = 0;
		if (!phoneNo.equals("99999999999")) {

			userInfo = user.getUserInfo(phoneNo);
			idNo = userInfo.getIdNo();
			brandId = userInfo.getBrandId();
		}

		// 取账户归属
		GroupchgInfoEntity groupChgEntity = group.getChgGroup(null, null,
				contractNo);

		// 缴费用户归属地市
		ChngroupRelEntity groupEntity = group.getRegionDistinct(
				groupChgEntity.getGroupId(), "2", provinceId);
		String regionId = groupEntity.getRegionCode();

		PayUserBaseEntity payUserBase = new PayUserBaseEntity();
		payUserBase.setIdNo(idNo);
		payUserBase.setPhoneNo(phoneNo);
		payUserBase.setContractNo(contractNo);
		payUserBase.setUserGroupId(groupChgEntity.getGroupId());
		payUserBase.setRegionId(regionId);
		payUserBase.setBrandId(brandId);

		return payUserBase;
	}
	
	protected void initCheck(long contractNo){
		ContractInfoEntity contractInfo = account.getConInfo(contractNo);
		if(!contractInfo.getContractattType().equals(PayBusiConst.YDZF_CONTRACTTYPE_STRING)){
			throw new BusiException(AcctMgrError.getErrorCode("8020", "00005"), "不允许非一点支付账户缴费！");
		}
	}

	public IInvoice getInvoice() {
		return invoice;
	}

	public void setInvoice(IInvoice invoice) {
		this.invoice = invoice;
	}

	public IAccount getAccount() {
		return account;
	}

	public void setAccount(IAccount account) {
		this.account = account;
	}

	public IUser getUser() {
		return user;
	}

	public void setUser(IUser user) {
		this.user = user;
	}

	public ILogin getLogin() {
		return login;
	}

	public void setLogin(ILogin login) {
		this.login = login;
	}

	public IControl getControl() {
		return control;
	}

	public void setControl(IControl control) {
		this.control = control;
	}

	public ICheque getCheque() {
		return cheque;
	}

	public void setCheque(ICheque cheque) {
		this.cheque = cheque;
	}

	public IOweBill getOweBill() {
		return oweBill;
	}

	public void setOweBill(IOweBill oweBill) {
		this.oweBill = oweBill;
	}

	public IBalance getBalance() {
		return balance;
	}

	public void setBalance(IBalance balance) {
		this.balance = balance;
	}

	public IRecord getRecord() {
		return record;
	}

	public void setRecord(IRecord record) {
		this.record = record;
	}

	public IGroup getGroup() {
		return group;
	}

	public void setGroup(IGroup group) {
		this.group = group;
	}

	public IPayManage getPayManage() {
		return payManage;
	}

	public void setPayManage(IPayManage payManage) {
		this.payManage = payManage;
	}

	public IRemainFee getReFee() {
		return reFee;
	}

	public void setReFee(IRemainFee reFee) {
		this.reFee = reFee;
	}

	public IWriteOffer getWriteOffer() {
		return writeOffer;
	}

	public void setWriteOffer(IWriteOffer writeOffer) {
		this.writeOffer = writeOffer;
	}

	public IPreOrder getPreOrder() {
		return preOrder;
	}

	public void setPreOrder(IPreOrder preOrder) {
		this.preOrder = preOrder;
	}

	public IBase getBase() {
		return base;
	}

	public void setBase(IBase base) {
		this.base = base;
	}

}
