package com.sitech.acctmgr.atom.impl.query;

import java.util.ArrayList;
import java.util.List;

import com.sitech.acctmgr.atom.domains.base.ChngroupRelEntity;
import com.sitech.acctmgr.atom.domains.prod.UserPdPrcEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.domains.user.UserPrcEntity;
import com.sitech.acctmgr.atom.dto.query.SFavTypeQueryInDTO;
import com.sitech.acctmgr.atom.dto.query.SFavTypeQueryOutDTO;
import com.sitech.acctmgr.atom.entity.inter.IBillAccount;
import com.sitech.acctmgr.atom.entity.inter.IGroup;
import com.sitech.acctmgr.atom.entity.inter.IProd;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.common.AcctMgrError;
import com.sitech.acctmgr.common.constant.CommonConst;
import com.sitech.acctmgr.inter.query.IFavType;
import com.sitech.common.utils.StringUtils;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;

/**
 * Created by wangyla on 2016/7/14.
 */
@ParamTypes({ @ParamType(c = SFavTypeQueryInDTO.class, m = "query", oc = SFavTypeQueryOutDTO.class) })
public class SFavType extends AcctMgrBaseService implements IFavType {
	private IUser user;
	private IProd prod;
	private IBillAccount billAccount;
	private IGroup group;

	@Override
	public OutDTO query(InDTO inParam) {
		SFavTypeQueryInDTO inDTO = (SFavTypeQueryInDTO) inParam;

		String phoneNo = inDTO.getPhoneNo();
		// 查询用户信息
		UserInfoEntity userInfo = user.getUserEntityByPhoneNo(phoneNo, true);
		long idNo = userInfo.getIdNo();

		// 查询地市代码
		ChngroupRelEntity chnGroupRel = group.getRegionDistinct(userInfo.getGroupId(), "2", inDTO.getProvinceId());
		String regionCode = chnGroupRel.getRegionCode();

		// 根据id_no查询基本资费ID offerId
		List<UserPrcEntity> basePrcList = prod.getPdPrcId(idNo, CommonConst.BASE_PRC_FLAG);

		if (basePrcList == null || basePrcList.size() == 0) {
			throw new BusiException(AcctMgrError.getErrorCode("0000", "00030"), "查询基本资费错误");
		}
		// 根据prodPrcid查询二批代码
		String rateCode = billAccount.getRateCode(basePrcList.get(0).getProdPrcid(), "0");

		// TODO：根据mode_code判断用户是否为动感地带，由于没有设置出参，所以就没写
		/* SELECT count(*) INTO :num FROM product_offer WHERE offer_id = to_number(:modeCode) AND OFFER_ATTR_TYPE = 'YnA0'; */

		// TODO:判断是否为预存专款赠机等专款业务，返回chSpecFund
		/* SELECT to_char(nvl(count(*),0)) INTO :chSpecFund FROM sFav1860SpecFund WHERE mode_code = :modeCode AND region_code = :region_code; */

		// TODO:
		/* select fav_type, nvl(trim(fav_call), '0.00'), nvl(trim(fav_char), '*'), nvl(trim(fav_save1), '0.00') into :int_fav_type, :fav_call, :fav_char, :str_save2 from sFav1860Cfg where mode_code = :modeCode and region_code = :region_code; */

		// TODO:查询未出帐话费
		// OutFeeData outFee = remainFee.getConRemainFee(userInfo.getContractNo());
		// long unbillFee = outFee.getUnbillFee();
		/* rate_code:二批代码 select a.detail_code into rate_code from PRICING_COMBINE a, product_offer b, product_offer_instance c where c.serv_id = :v1 and b.offer_type = any('10', '20') and b.offer_id = c.offer_id and a.pricing_plan_id = b.pricing_plan_id and sysdate BETWEEN c.eff_date AND c.exp_date and rownum < 2 */

		// 根据id_no查询附加资费ID
		List<UserPrcEntity> attachPrcListTmp = prod.getPdPrcId(idNo, CommonConst.ATTACH_PRC_FLAG);
		List<UserPdPrcEntity> attachPrcList = new ArrayList<UserPdPrcEntity>();

		for (UserPrcEntity userPrc : attachPrcListTmp) {
			// 根据prodPrcid查询二批代码
			String prodPrcId = userPrc.getProdPrcid();
			String attrRateCode = billAccount.getRateCode(prodPrcId, "0");
			if (StringUtils.isEmptyOrNull(attrRateCode)) {
				continue;
			}
			UserPdPrcEntity userPdprc = new UserPdPrcEntity();
			userPdprc.setEffDate(userPrc.getEffDate());
			userPdprc.setExpDate(userPrc.getExpDate());
			userPdprc.setProdPrcId(userPrc.getProdPrcid());
			userPdprc.setProdPrcName(userPrc.getProdPrcName());
			userPdprc.setStateDate(userPrc.getStateDate());
			userPdprc.setRateCode(attrRateCode);
			attachPrcList.add(userPdprc);
		}

		SFavTypeQueryOutDTO outDTO = new SFavTypeQueryOutDTO();
		outDTO.setModeCode(basePrcList.get(0).getProdPrcid());
		outDTO.setRegionCode(regionCode);
		if (StringUtils.isEmptyOrNull(rateCode)) {
			outDTO.setRateCode(rateCode);
		}

		outDTO.setUserPdPrcList(attachPrcList);
		return outDTO;
	}

	public IUser getUser() {
		return user;
	}

	public void setUser(IUser user) {
		this.user = user;
	}

	public IProd getProd() {
		return prod;
	}

	public void setProd(IProd prod) {
		this.prod = prod;
	}

	public IBillAccount getBillAccount() {
		return billAccount;
	}

	public void setBillAccount(IBillAccount billAccount) {
		this.billAccount = billAccount;
	}

	public IGroup getGroup() {
		return group;
	}

	public void setGroup(IGroup group) {
		this.group = group;
	}

}
