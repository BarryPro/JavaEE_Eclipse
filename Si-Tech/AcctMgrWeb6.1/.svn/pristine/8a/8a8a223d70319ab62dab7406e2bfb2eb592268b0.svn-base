package com.sitech.acctmgr.atom.impl.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sitech.acctmgr.atom.domains.balance.BookTypeEnum;
import com.sitech.acctmgr.atom.domains.pay.PayMentEntity;
import com.sitech.acctmgr.atom.domains.query.SpFeeRecycleEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.dto.query.S8413InDTO;
import com.sitech.acctmgr.atom.dto.query.S8413OutDTO;
import com.sitech.acctmgr.atom.entity.inter.IBalance;
import com.sitech.acctmgr.atom.entity.inter.IBillDisplayer;
import com.sitech.acctmgr.atom.entity.inter.IRecord;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.common.AcctMgrError;
import com.sitech.acctmgr.inter.query.I8413;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;

@ParamTypes({ @ParamType(c = S8413InDTO.class, oc = S8413OutDTO.class, m = "query") })
public class S8413 extends AcctMgrBaseService implements I8413 {

	IUser user;
	IBalance balance;
	IBillDisplayer billDisplayer;
	IRecord record;

	@Override
	public OutDTO query(InDTO inParam) {
		S8413InDTO inDto = (S8413InDTO) inParam;
		String phoneNo = inDto.getPhoneNo();

		Map<String, Object> inMap = new HashMap<String, Object>();
		// 根据服务号码查询用户信息
		UserInfoEntity userInfo = user.getUserEntity(0l, phoneNo, 0l, true);
		long contractNo = userInfo.getContractNo();
		List<SpFeeRecycleEntity> spFeeRecycleList = new ArrayList<SpFeeRecycleEntity>();

		// 根据账户查询账本信息
		inMap.put("CONTRACT_NO", contractNo);
		List<SpFeeRecycleEntity> spFeeRecyList = balance.getSpBookHis(inMap);

		// 根据contract_no，id_no从冲销表中查询回收金额
		for (SpFeeRecycleEntity spFeeRecy : spFeeRecyList) {

			String endTimeTmp = spFeeRecy.getEndTime();
			int endTime = Integer.parseInt(endTimeTmp.substring(0, 8));
			int beginTime = Integer.parseInt(spFeeRecy.getBeginTime().substring(0, 8));
			log.debug("endtime:" + endTime + "endday:" + endTime % 100 + "   beginTime:" + beginTime + " beginday:" + beginTime % 100);
			int endYm = Integer.parseInt(endTimeTmp.substring(0, 6));
			// int beginYm =
			// Integer.parseInt(spFeeRecy.getBeginTime().substring(0, 6));
			// 如果非立即生效或者如果生失效时间不为1号，不展示
			if (beginTime % 100 != 1
					&& Integer.parseInt(spFeeRecy.getBeginTime().substring(0, 8)) != Integer.parseInt(spFeeRecy.getOpTime().substring(0, 8))) {
				continue;
			}

			// 从冲销表中获取回收金额
			long outFee = billDisplayer.getOutFee(contractNo, endYm, BookTypeEnum.NORAML);
			spFeeRecy.setRecycleMoney(outFee);

			// 根据paySn查询操作代码,直接从办理日期从缴费记录表中查询
			inMap = new HashMap<String, Object>();
			inMap.put("SUFFIX", Integer.parseInt(spFeeRecy.getOpTime().substring(0, 6)));
			inMap.put("PAY_SN", spFeeRecy.getPaySn());
			inMap.put("CONTRACT_NO", contractNo);
			List<PayMentEntity> paymentList = record.getPayMentList(inMap);
			if (paymentList == null || paymentList.size() == 0) {
				continue;
			}
			String opCode = paymentList.get(0).getOpCode();
			// TODO:如果op_code是营销回收 e179,不展示
			if (opCode.equals("e179")) {
				continue;
			}
			spFeeRecy.setOpCode(opCode);

			spFeeRecycleList.add(spFeeRecy);
		}

		if (spFeeRecycleList == null || spFeeRecycleList.size() == 0) {
			throw new BusiException(AcctMgrError.getErrorCode("8413", "00001"), "该用户没有专款回收记录");
		}
		S8413OutDTO outDto = new S8413OutDTO();
		outDto.setSpFeeRecyList(spFeeRecycleList);
		return outDto;
	}

	public IUser getUser() {
		return user;
	}

	public void setUser(IUser user) {
		this.user = user;
	}

	public IBalance getBalance() {
		return balance;
	}

	public void setBalance(IBalance balance) {
		this.balance = balance;
	}

	public IBillDisplayer getBillDisplayer() {
		return billDisplayer;
	}

	public void setBillDisplayer(IBillDisplayer billDisplayer) {
		this.billDisplayer = billDisplayer;
	}

	public IRecord getRecord() {
		return record;
	}

	public void setRecord(IRecord record) {
		this.record = record;
	}

}
