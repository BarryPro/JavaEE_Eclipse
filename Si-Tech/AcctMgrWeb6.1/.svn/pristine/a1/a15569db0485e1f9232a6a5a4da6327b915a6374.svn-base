package com.sitech.acctmgr.atom.impl.cct;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sitech.acctmgr.atom.domains.account.ContractInfoEntity;
import com.sitech.acctmgr.atom.domains.base.ChngroupRelEntity;
import com.sitech.acctmgr.atom.domains.cct.GrpCreditEntity;
import com.sitech.acctmgr.atom.domains.cct.GrpRedEntity;
import com.sitech.acctmgr.atom.domains.cct.NonStopEntity;
import com.sitech.acctmgr.atom.domains.cust.CustInfoEntity;
import com.sitech.acctmgr.atom.domains.cust.GrpCustInfoEntity;
import com.sitech.acctmgr.atom.domains.pub.PubCodeDictEntity;
import com.sitech.acctmgr.atom.domains.record.LoginOprEntity;
import com.sitech.acctmgr.atom.domains.user.GroupUserInfo;
import com.sitech.acctmgr.atom.domains.user.UserDetailEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.domains.user.UserPrcEntity;
import com.sitech.acctmgr.atom.domains.user.UsersvcAttrEntity;
import com.sitech.acctmgr.atom.dto.cct.S8258CfmInDTO;
import com.sitech.acctmgr.atom.dto.cct.S8258CfmOutDTO;
import com.sitech.acctmgr.atom.dto.cct.S8258NonStopOutDTO;
import com.sitech.acctmgr.atom.dto.cct.S8258QryInDTO;
import com.sitech.acctmgr.atom.dto.cct.S8258QryOutDTO;
import com.sitech.acctmgr.atom.entity.inter.IAccount;
import com.sitech.acctmgr.atom.entity.inter.IBill;
import com.sitech.acctmgr.atom.entity.inter.IBillAccount;
import com.sitech.acctmgr.atom.entity.inter.IControl;
import com.sitech.acctmgr.atom.entity.inter.ICredit;
import com.sitech.acctmgr.atom.entity.inter.ICust;
import com.sitech.acctmgr.atom.entity.inter.IGroup;
import com.sitech.acctmgr.atom.entity.inter.IProd;
import com.sitech.acctmgr.atom.entity.inter.IRecord;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.common.AcctMgrError;
import com.sitech.acctmgr.inter.cct.I8258;
import com.sitech.common.utils.StringUtils;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;
import com.sitech.jcfx.util.DateUtil;

@ParamTypes({ @ParamType(m = "query", c = S8258QryInDTO.class, oc = S8258QryOutDTO.class),
	@ParamType(m = "cfm", c = S8258CfmInDTO.class, oc = S8258CfmOutDTO.class),
	@ParamType(m = "nonStopQry", c = S8258QryInDTO.class, oc = S8258NonStopOutDTO.class)
})
public class S8258 extends AcctMgrBaseService implements I8258{

	private IUser user;
	private ICust cust;
	private IGroup group;
	private ICredit credit;
	private IControl control;
	private IRecord record;
	private IAccount account;
	private IProd prod;
	private IBill bill;
	private IBillAccount billAccount;
	
	@Override
	public OutDTO query(InDTO inParam) {
		// TODO Auto-generated method stub
		List<GrpRedEntity> resultList = new ArrayList<GrpRedEntity>();
		
		S8258QryInDTO inDto = (S8258QryInDTO)inParam;
		String unitId = inDto.getUnitId();
		
		List<GrpRedEntity> grpList = billAccount.getGrpCreditInfo(unitId);
		for(GrpRedEntity gre:grpList) {		
			long contractNo = gre.getContractNo();
			ContractInfoEntity cie = account.getConInfo(contractNo);
			String unitName = cie.getContractName();
			gre.setUnitName(unitName);
			
			resultList.add(gre);
		}
		
		S8258QryOutDTO outDto = new S8258QryOutDTO();
		outDto.setReturnList(resultList);
		return outDto;
	}

	@Override
	public OutDTO cfm(InDTO inParam) {
		// TODO Auto-generated method stub
		S8258CfmInDTO inDto = (S8258CfmInDTO)inParam;
		long idNo = inDto.getIdNo();
		long contractNo = inDto.getContractNo();
		long unitId = inDto.getUnitId();
		String monthLength = inDto.getMonthLength();
		String redType = inDto.getRedType();
		
		UserDetailEntity uie = user.getUserdetailEntity(idNo);		
		String runCode = uie.getRunCode();
		if(!runCode.equals("A")){
			throw new BusiException(AcctMgrError.getErrorCode("8258", "00001"), "集团当前是非正常状态，不可以办理红名单");
		}
		
		/*
		if(redType.equals("0")){
			throw new BusiException(AcctMgrError.getErrorCode("8258", "00008"), "请选择红名单等级！");
		}
		*/
		
		if(StringUtils.isEmptyOrNull(monthLength)) {
			throw new BusiException(AcctMgrError.getErrorCode("8258", "00009"), "请设置时间长度！");
		}
		
		GrpCustInfoEntity gcie = cust.getGrpCustInfo(null, unitId);
		long custId = gcie.getCustId();
		
		CustInfoEntity cie = cust.getCustInfo(custId, "");
		String custGroupId = cie.getGroupId();
		
		ChngroupRelEntity cgreCust = group.getRegionDistinct(custGroupId, "2", inDto.getProvinceId());
		String custRegion = cgreCust.getRegionCode();
		ChngroupRelEntity cgreLogin = group.getRegionDistinct(inDto.getGroupId(), "2", inDto.getProvinceId());
		String loginRegion = cgreLogin.getRegionCode();
		if(!custRegion.equals(loginRegion)) {
			throw new BusiException(AcctMgrError.getErrorCode("8258", "00002"), "集团和工号归属不同，不可以办理!");
		}
		
		if(Integer.parseInt(monthLength)>13){
			throw new BusiException(AcctMgrError.getErrorCode("8258", "00003"), "最长设置时间范围为13个月，请重新输入!");
		}
		
		//取集团等级
		GrpCreditEntity gce = credit.getGrpCredit(unitId);
		String creditCode = gce.getCreditCode();
		
		//判断工号权限
		int length=Integer.parseInt(monthLength);
		List<PubCodeDictEntity> pubList = control.getPubCodeList(Long.parseLong("1201"), inDto.getLoginNo(), "8258", null);
		if(pubList.size()==0){
			if(creditCode.equals("0")){
				throw new BusiException(AcctMgrError.getErrorCode("8258", "00004"), "集团当前无信用等级，不可以办理!");
			}
			if(creditCode.equals("A")&&length>2){
				throw new BusiException(AcctMgrError.getErrorCode("8258", "00005"), "信用等级为A->高信用等级，最多可设置间隔为2个月!");
			}
			if(creditCode.equals("B")&&length>1){
				throw new BusiException(AcctMgrError.getErrorCode("8258", "00006"), "信用等级为B->中信用等级，最多可设置间隔为1个月!");
			}
			if(creditCode.equals("C")){
				throw new BusiException(AcctMgrError.getErrorCode("8258", "00007"), "信用等级为C->低信用等级，不可以办理!");
			}
		}
		
		Map<String,Object> inMap = new HashMap<String,Object>();
		inMap.put("ID_NO", idNo);
		inMap.put("CONTRACT_NO", contractNo);
		inMap.put("UNIT_ID", unitId);
		inMap.put("CREDIT_CODE", redType);
		inMap.put("RED_LENGTH", monthLength);
		inMap.put("LOGIN_NO", inDto.getLoginNo());
		inMap.put("OP_CODE", inDto.getOpCode());
		credit.saveGrpRedList(inMap);
		
		long lLoginSn = control.getSequence("SEQ_SYSTEM_SN");
		// 记录操作日志
		String sCurDate = DateUtil.format(new Date(), "yyyyMMdd");
		String sSuffix = sCurDate.substring(0, 6);

		LoginOprEntity loe = new LoginOprEntity();
		loe.setLoginSn(lLoginSn);
		loe.setLoginNo(inDto.getLoginNo());
		loe.setLoginGroup(inDto.getGroupId());
		loe.setTotalDate(Long.parseLong(sCurDate));
		loe.setIdNo(idNo);
		loe.setPhoneNo("0");
		loe.setBrandId("00");
		loe.setPayType("0");
		loe.setPayFee(0);
		loe.setOpCode("8258");
		loe.setRemark("集团红名单等级修改");
		record.saveLoginOpr(loe);
		
		S8258CfmOutDTO outDto = new S8258CfmOutDTO();
		return outDto;
	}
	
	@Override
	public OutDTO nonStopQry(InDTO inParam) {
		List<NonStopEntity> resultList = new ArrayList<NonStopEntity>();
		S8258QryInDTO inDto = (S8258QryInDTO)inParam;
		String unitId = inDto.getUnitId();
		
		resultList =  billAccount.getNonStopInfo(unitId);

		S8258NonStopOutDTO outDto = new S8258NonStopOutDTO();
		outDto.setResultList(resultList);
		return outDto;
	}

	/**
	 * @return the user
	 */
	public IUser getUser() {
		return user;
	}

	/**
	 * @param user the user to set
	 */
	public void setUser(IUser user) {
		this.user = user;
	}

	/**
	 * @return the cust
	 */
	public ICust getCust() {
		return cust;
	}

	/**
	 * @param cust the cust to set
	 */
	public void setCust(ICust cust) {
		this.cust = cust;
	}

	/**
	 * @return the group
	 */
	public IGroup getGroup() {
		return group;
	}

	/**
	 * @param group the group to set
	 */
	public void setGroup(IGroup group) {
		this.group = group;
	}

	/**
	 * @return the credit
	 */
	public ICredit getCredit() {
		return credit;
	}

	/**
	 * @param credit the credit to set
	 */
	public void setCredit(ICredit credit) {
		this.credit = credit;
	}

	/**
	 * @return the control
	 */
	public IControl getControl() {
		return control;
	}

	/**
	 * @param control the control to set
	 */
	public void setControl(IControl control) {
		this.control = control;
	}

	/**
	 * @return the record
	 */
	public IRecord getRecord() {
		return record;
	}

	/**
	 * @param record the record to set
	 */
	public void setRecord(IRecord record) {
		this.record = record;
	}

	/**
	 * @return the account
	 */
	public IAccount getAccount() {
		return account;
	}

	/**
	 * @param account the account to set
	 */
	public void setAccount(IAccount account) {
		this.account = account;
	}

	/**
	 * @return the prod
	 */
	public IProd getProd() {
		return prod;
	}

	/**
	 * @param prod the prod to set
	 */
	public void setProd(IProd prod) {
		this.prod = prod;
	}

	/**
	 * @return the bill
	 */
	public IBill getBill() {
		return bill;
	}

	/**
	 * @param bill the bill to set
	 */
	public void setBill(IBill bill) {
		this.bill = bill;
	}

	/**
	 * @return the billAccount
	 */
	public IBillAccount getBillAccount() {
		return billAccount;
	}

	/**
	 * @param billAccount the billAccount to set
	 */
	public void setBillAccount(IBillAccount billAccount) {
		this.billAccount = billAccount;
	}
	
	
	
}
