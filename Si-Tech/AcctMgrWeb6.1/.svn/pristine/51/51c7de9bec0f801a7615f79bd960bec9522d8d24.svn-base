package com.sitech.acctmgr.atom.impl.feeqry;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import com.sitech.acctmgr.atom.busi.query.inter.IRemainFee;
import com.sitech.acctmgr.atom.domains.account.ContractInfoEntity;
import com.sitech.acctmgr.atom.domains.fee.OutFeeData;
import com.sitech.acctmgr.atom.domains.record.LoginOprEntity;
import com.sitech.acctmgr.atom.domains.user.UserExpireEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.dto.feeqry.SJtPrepayInitInDTO;
import com.sitech.acctmgr.atom.dto.feeqry.SJtPrepayInitOutDTO;
import com.sitech.acctmgr.atom.dto.feeqry.SQry1500OutDTO;
import com.sitech.acctmgr.atom.dto.feeqry.SQry1500VwOutDTO;
import com.sitech.acctmgr.atom.dto.feeqry.SRemainFeeInitInDTO;
import com.sitech.acctmgr.atom.dto.feeqry.SRemainFeeInitOutDTO;
import com.sitech.acctmgr.atom.entity.inter.IAccount;
import com.sitech.acctmgr.atom.entity.inter.IBalance;
import com.sitech.acctmgr.atom.entity.inter.IBill;
import com.sitech.acctmgr.atom.entity.inter.IControl;
import com.sitech.acctmgr.atom.entity.inter.IRecord;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.common.AcctMgrError;
import com.sitech.acctmgr.inter.feeqry.IRemainFeeQry;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;
import com.sitech.jcfx.util.DateUtil;

@ParamTypes({ 
	@ParamType(m = "query", c = SRemainFeeInitInDTO.class, oc = SRemainFeeInitOutDTO.class),
	@ParamType(m = "qry1500", c = SRemainFeeInitInDTO.class, oc = SQry1500OutDTO.class),
	@ParamType(m = "qry1500Vw", c = SRemainFeeInitInDTO.class, oc = SQry1500VwOutDTO.class),
	@ParamType(m = "jtQuery", c = SJtPrepayInitInDTO.class, oc = SJtPrepayInitOutDTO.class)
})
public class SRemainFeeQry extends AcctMgrBaseService implements IRemainFeeQry{

	protected IBalance balance;
	protected IControl control;
	protected IRecord record;
	protected IUser user;
	protected IBill bill;
	protected IRemainFee remainFee;
	protected IAccount account;
	@Override
	public OutDTO query(InDTO inParam) {
		// TODO Auto-generated method stub
		SRemainFeeInitInDTO inDto= (SRemainFeeInitInDTO)inParam;
		String phoneNo = inDto.getPhoneNo();
		
		//TODO 查询代理商账号
		long contractNo =0;
		ContractInfoEntity cie = account.getAgtInfo(phoneNo);
		contractNo = cie.getContractNo();
		
		//查询账户余额
		long prepayFee =balance.getAcctBookSum(contractNo, "0");
		
		//取操作流水
		long loginAccept = control.getSequence("SEQ_SYSTEM_SN");
		
		//入操作记录表
		LoginOprEntity loe = new LoginOprEntity();
		loe.setLoginSn(loginAccept);
		loe.setLoginNo(inDto.getLoginNo());
		loe.setLoginGroup(inDto.getGroupId());
		loe.setTotalDate(Long.parseLong(DateUtil.format(new Date(), "yyyyMMdd")));
		loe.setIdNo(0);
		loe.setPhoneNo(phoneNo);
		loe.setBrandId("00");
		loe.setPayType("0");
		loe.setPayFee(0);
		loe.setOpCode("xxxx");
		loe.setRemark("代理商余额查询");
		record.saveLoginOpr(loe);
		
		//TODO 给代理商发短信
		
		SRemainFeeInitOutDTO outDto = new SRemainFeeInitOutDTO();
		outDto.setPrepayFee(prepayFee);
		outDto.setPhoneNo(phoneNo);
		outDto.setLoginAccept(loginAccept);
		return outDto;
	}
	
	@Override
	public OutDTO qry1500(InDTO inParam) {
		// TODO Auto-generated method stub
		Map<String,Object> inMap = new HashMap<String,Object>();
		Map<String,Object> outMap = new HashMap<String,Object>();
		
		SRemainFeeInitInDTO inDto= (SRemainFeeInitInDTO)inParam;
		String phoneNo = inDto.getPhoneNo();
		
		String expireTime="0";
		UserInfoEntity uie = user.getUserInfo(phoneNo);
		long contractNo = uie.getContractNo();
		long idNo = uie.getIdNo();
		
		UserExpireEntity uee = user.getUserExpireInfo(idNo);
		if(uee!=null){
			expireTime = uee.getExpireTime();
		}		
		
		//取专款预存
		inMap.put("CONTRACT_NO", contractNo);
		inMap.put("SPECIAL_FLAG", "0");
		long specialFee = balance.getAcctBookSumByMap(inMap);
		
		//取普通预存
		inMap.put("CONTRACT_NO", contractNo);
		inMap.put("SPECIAL_FLAG", "1");
		long commonFee = balance.getAcctBookSumByMap(inMap);
		
		//取往月欠费
		Map<String, Long> oweMap = new HashMap<>();
		oweMap = bill.getSumUnpayInfo(contractNo, null, null);
		long oweFee = oweMap.get("OWE_FEE");
		
		//取预存
		long prepayFee = balance.getAcctBookSum(contractNo, null);
		
		//取余额、未出帐话费
		OutFeeData ofd = remainFee.getConRemainFee(contractNo);
		long curBalance = ofd.getRemainFee();
		long unBillFee = ofd.getUnbillFee();
		
		SQry1500OutDTO outDto = new SQry1500OutDTO();
		outDto.setCommonFee(commonFee);
		outDto.setCurBalance(curBalance);
		outDto.setExpireTime(expireTime);
		outDto.setOweFee(oweFee);
		outDto.setPrepayFee(prepayFee);
		outDto.setSpecialFee(specialFee);
		outDto.setUnBillFee(unBillFee);
		
		return outDto;
	}
	
	@Override
	public OutDTO qry1500Vw(InDTO inParam) {
		Map<String,Object> inMap = new HashMap<String,Object>();
		Map<String,Object> outMap = new HashMap<String,Object>();
		
		SRemainFeeInitInDTO inDto= (SRemainFeeInitInDTO)inParam;
		String phoneNo = inDto.getPhoneNo();
		
		UserInfoEntity uie = user.getUserInfo(phoneNo);
		long contractNo = uie.getContractNo();
		long idNo = uie.getIdNo();	
		
		//取预存
		long prepayFee = 0;
		prepayFee = balance.getAcctBookSum(contractNo, null);
		
		//取余额、未出帐话费		
		long unBillFee=0;
		long specialFee=0;
		long commonFee=0;
		long remainfee=0;
		OutFeeData ofd = remainFee.getConRemainFee(contractNo);	
		unBillFee = ofd.getUnbillFee();
		specialFee = ofd.getSepcialFee();
		remainfee = ofd.getRemainFee();
		commonFee = remainfee - specialFee;
		
		//TODO 取底线金额
		long hasLowest =0;
		long loweOwe = 0;
		
		SQry1500VwOutDTO outDto = new SQry1500VwOutDTO();
		outDto.setCommonFee(commonFee);
		outDto.setCurBalance(remainfee);
		outDto.setHasLowe(hasLowest);
		outDto.setLoweOwe(loweOwe);
		outDto.setPrepayFee(prepayFee);
		outDto.setSpecialFee(specialFee);
		outDto.setUnBillFee(unBillFee);		
		return outDto;
	}
	
	@Override
	public OutDTO jtQuery(InDTO inParam) {
		SJtPrepayInitInDTO inDto= (SJtPrepayInitInDTO)inParam;
		long contractNo = Long.parseLong(inDto.getContractNo());
		
		ContractInfoEntity cie = account.getConInfo(contractNo);
		String accountType = cie.getAccountType();
		if(!accountType.equals("1")){
			throw new BusiException(AcctMgrError.getErrorCode("0000","00035"), "集团产品账号不存在["+contractNo+"]!");
		}
		
		//查询账户余额
		long prepayFee =balance.getAcctBookSum(contractNo, "0");
		
		SJtPrepayInitOutDTO outDto = new SJtPrepayInitOutDTO();
		outDto.setPrepayFee(prepayFee);
		return outDto;
	}
	
	/**
	 * @return the balance
	 */
	public IBalance getBalance() {
		return balance;
	}
	/**
	 * @param balance the balance to set
	 */
	public void setBalance(IBalance balance) {
		this.balance = balance;
	}
	/**
	 * @return the control
	 */
	public IControl getControl() {
		return control;
	}
	/**
	 * @param control the control to set
	 */
	public void setControl(IControl control) {
		this.control = control;
	}
	/**
	 * @return the record
	 */
	public IRecord getRecord() {
		return record;
	}
	/**
	 * @param record the record to set
	 */
	public void setRecord(IRecord record) {
		this.record = record;
	}

	/**
	 * @return the user
	 */
	public IUser getUser() {
		return user;
	}

	/**
	 * @param user the user to set
	 */
	public void setUser(IUser user) {
		this.user = user;
	}

	/**
	 * @return the bill
	 */
	public IBill getBill() {
		return bill;
	}

	/**
	 * @param bill the bill to set
	 */
	public void setBill(IBill bill) {
		this.bill = bill;
	}

	/**
	 * @return the remainFee
	 */
	public IRemainFee getRemainFee() {
		return remainFee;
	}

	/**
	 * @param remainFee the remainFee to set
	 */
	public void setRemainFee(IRemainFee remainFee) {
		this.remainFee = remainFee;
	}

	/**
	 * @return the account
	 */
	public IAccount getAccount() {
		return account;
	}

	/**
	 * @param account the account to set
	 */
	public void setAccount(IAccount account) {
		this.account = account;
	}
	
}
