package com.sitech.acctmgr.atom.impl.pay;

import static com.sitech.acctmgr.common.AcctMgrError.getErrorCode;
import static org.apache.commons.collections.MapUtils.safeAddToMap;

import java.util.HashMap;
import java.util.Map;

import com.sitech.acctmgr.atom.busi.pay.inter.IPayManage;
import com.sitech.acctmgr.atom.busi.pay.inter.ITransType;
import com.sitech.acctmgr.atom.busi.pay.trans.TransFactory;
import com.sitech.acctmgr.atom.busi.query.inter.IRemainFee;
import com.sitech.acctmgr.atom.domains.account.ContractInfoEntity;
import com.sitech.acctmgr.atom.domains.base.LoginBaseEntity;
import com.sitech.acctmgr.atom.domains.base.LoginEntity;
import com.sitech.acctmgr.atom.domains.pay.PayBookEntity;
import com.sitech.acctmgr.atom.domains.pay.PayUserBaseEntity;
import com.sitech.acctmgr.atom.domains.pub.PubWrtoffCtrlEntity;
import com.sitech.acctmgr.atom.domains.record.LoginOprEntity;
import com.sitech.acctmgr.atom.domains.user.UserInfoEntity;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransBnCfmInDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransBnCfmOutDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransBnCheckInDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransBnCheckOutDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransCancelCfmInDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransCancelCfmOutDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransCfmInDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransCfmOutDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransRollBackInDTO;
import com.sitech.acctmgr.atom.dto.pay.SpecialTransRollBackOutDTO;
import com.sitech.acctmgr.atom.entity.inter.IAccount;
import com.sitech.acctmgr.atom.entity.inter.IBalance;
import com.sitech.acctmgr.atom.entity.inter.IControl;
import com.sitech.acctmgr.atom.entity.inter.IGroup;
import com.sitech.acctmgr.atom.entity.inter.ILogin;
import com.sitech.acctmgr.atom.entity.inter.IRecord;
import com.sitech.acctmgr.atom.entity.inter.IUser;
import com.sitech.acctmgr.common.AcctMgrBaseService;
import com.sitech.acctmgr.inter.pay.ISpecialTrans;
import com.sitech.common.utils.StringUtils;
import com.sitech.jcf.core.exception.BusiException;
import com.sitech.jcfx.anno.ParamType;
import com.sitech.jcfx.anno.ParamTypes;
import com.sitech.jcfx.dt.in.InDTO;
import com.sitech.jcfx.dt.out.OutDTO;
import com.sitech.jcfx.util.DateUtil;



@ParamTypes({ 
	@ParamType(c = SpecialTransCfmInDTO.class, m = "cfm", oc = SpecialTransCfmOutDTO.class),
	@ParamType(c = SpecialTransBnCfmInDTO.class, m = "bnCfm", oc = SpecialTransBnCfmOutDTO.class),
	@ParamType(c = SpecialTransRollBackInDTO.class, m = "rollBack", oc = SpecialTransRollBackOutDTO.class),
	@ParamType(c = SpecialTransCancelCfmInDTO.class, m = "cfm", oc = SpecialTransCancelCfmOutDTO.class),
	@ParamType(c = SpecialTransBnCheckInDTO.class, m = "bnCheck", oc = SpecialTransBnCheckOutDTO.class)
	})
public class SpecialTrans extends AcctMgrBaseService implements ISpecialTrans{
	
	private IPayManage	payManage;
	private IBalance balance;
	private TransFactory transFactory;
	private IUser user;
	private IRemainFee remainFee;
	private IAccount account;
	private IControl control;
	private IRecord record;
	private ILogin	login;

	@Override
	public OutDTO cfm(InDTO inParam) {
		// TODO Auto-generated method stub
		SpecialTransCfmInDTO inDto = (SpecialTransCfmInDTO) inParam;
		log.info("cfm 入参："+inDto);
		
		//计算需要转账金额
		long monthFee = Long.parseLong(inDto.getMonthFee());
		int effectMonth  = inDto.getEffectMonth();
		long transFee = monthFee*effectMonth;
		
		/* 获取当前日期 */
		String curTime = control.getSysDate().get("CUR_TIME").toString();
		String totalDate = curTime.substring(0, 8);
		String curYM = curTime.substring(0, 6);
		
		//查询在网用户信息
		UserInfoEntity userEnt = user.getUserInfo(inDto.getOutPhoneNo());
		long idNo =userEnt.getIdNo();
	
		
		/* 创建转账类型 */
		ITransType transType;
		transType = transFactory.createTransFactory("TransSpecial",true);
		
		/* 取账户可转余额 */
		long remainTransFee = transType.getTranFee(inDto.getOutContractNo());
		log.info("可转余额---->"+remainTransFee);
		
		/*计算用户的账户余额*/
		long remainFeeTmp =  remainFee.getConRemainFee(inDto.getOutContractNo()).getRemainFee();
		
		if(remainTransFee<transFee || remainFeeTmp<transFee){
			throw new BusiException(getErrorCode("0000", "00002"), "可转预存不足，办理业务失败！");
		}
		
		PayUserBaseEntity transInBaseInfo = new PayUserBaseEntity();  //转入账户基本信息
		PayUserBaseEntity transOutBaseInfo = new PayUserBaseEntity();
		
		/* 转账账户基本信息查询 */
		transOutBaseInfo= getUserBaseInfo(inDto.getOutPhoneNo(), inDto.getOutContractNo());
		transOutBaseInfo.setNetFlag(true);
		transInBaseInfo= getUserBaseInfo(inDto.getInPhoneNo(), inDto.getInContractNo());
		transInBaseInfo.setNetFlag(true);
		
		/*入账实体设值*/
		PayBookEntity bookIn = new PayBookEntity();
		bookIn.setBeginTime(curTime);
		bookIn.setForeignSn(inDto.getForeignSn());
		bookIn.setGroupId(inDto.getGroupId());
		bookIn.setLoginNo(inDto.getLoginNo());
		bookIn.setOpCode(inDto.getOpCode());
		bookIn.setOpNote(inDto.getOpNote());
		bookIn.setPayFee(transFee);
		bookIn.setPayMethod("0");
		bookIn.setPayPath("11");
		bookIn.setPayType(inDto.getPayType());
		bookIn.setTotalDate(Integer.parseInt(totalDate));
		bookIn.setYearMonth(Long.parseLong(curYM));
		
		Map<String, Object> inTransCfmMap = new HashMap<String, Object>();
		safeAddToMap(inTransCfmMap, "Header", inDto.getHeader());
		safeAddToMap(inTransCfmMap, "TRANS_TYPE_OBJ", transType); //转账类型实例化对象
		safeAddToMap(inTransCfmMap, "TRANS_IN", transInBaseInfo);  //转入账户基本信息
		safeAddToMap(inTransCfmMap, "TRANS_OUT", transOutBaseInfo); //转出账户基本信息
		safeAddToMap(inTransCfmMap, "BOOK_IN", bookIn); //入账实体
		safeAddToMap(inTransCfmMap, "OP_TYPE", inDto.getOpType()); //转账类型
		safeAddToMap(inTransCfmMap, "IN_PAY_TYPE", inDto.getPayType()); //转账类型
		safeAddToMap(inTransCfmMap, "EFFECT_MONTH", inDto.getEffectMonth());
		safeAddToMap(inTransCfmMap, "BEGIN_DATE", inDto.getBeginDate());
		
		//进行专款分月转账
		long cfmSn = payManage.specialTrans(inTransCfmMap);
		
		//记录营业员操作记录表
		LoginOprEntity loginOprEnt = new LoginOprEntity();
		loginOprEnt.setBrandId(userEnt.getBrandId());
		loginOprEnt.setIdNo(idNo);
		loginOprEnt.setLoginGroup(inDto.getGroupId());
		loginOprEnt.setLoginNo(inDto.getLoginNo());
		loginOprEnt.setLoginSn(cfmSn);
		loginOprEnt.setOpCode(inDto.getOpCode());
		loginOprEnt.setOpTime(curTime);
		loginOprEnt.setPayFee(0);
		loginOprEnt.setPhoneNo(inDto.getOutPhoneNo());
		loginOprEnt.setRemark(inDto.getOpNote());
		loginOprEnt.setPayType("0");
		loginOprEnt.setTotalDate(Long.parseLong(totalDate));
		loginOprEnt.setPayFee(transFee);
		record.saveLoginOpr(loginOprEnt);
		
		SpecialTransCfmOutDTO outDto = new SpecialTransCfmOutDTO();
		log.info("cfm 出参："+outDto);
		return outDto;
	}
	
	public OutDTO bnCfm(InDTO inParam) {
		
		SpecialTransBnCfmInDTO inDto = (SpecialTransBnCfmInDTO) inParam;
		log.info("bnCfm 入参："+inDto);
		LoginEntity  loginEntity = login.getLoginInfo(inDto.getLoginNo(), inDto.getProvinceId());
		if( StringUtils.isEmptyOrNull(inDto.getGroupId()) ){
			inDto.setGroupId(loginEntity.getGroupId());
		}
		
		/* 获取当前日期 */
		String curTime = control.getSysDate().get("CUR_TIME").toString();
		String totalDate = curTime.substring(0, 8);
		String curYM = curTime.substring(0, 6);
		
		/* 创建转账类型 */
		ITransType transType = transFactory.createTransFactory("TransAccountEnt",true);
		
		/* 取账户可转余额 */
		long remainTransFee = transType.getTranFee(inDto.getOutContractNo());
		log.info("可转余额---->"+remainTransFee);
		
		if(remainTransFee < inDto.getYearFee()){
			throw new BusiException(getErrorCode("8014", "00046"), "用户可转余额不足，请缴费后再办理业务！");
		}
		
		/* 转账账户基本信息查询 */
		PayUserBaseEntity transOutBaseInfo= getUserBaseInfo(inDto.getOutPhoneNo(), inDto.getOutContractNo());
		transOutBaseInfo.setNetFlag(true);
		PayUserBaseEntity transInBaseInfo= getUserBaseInfo(inDto.getInPhoneNo(), inDto.getInContractNo());
		transInBaseInfo.setNetFlag(true);
		
		//账本结束日期等于 专款生效时间+生效月份 01号
		String endTime = DateUtil.toStringPlusMonths(inDto.getBeginDate().substring(0, 6), inDto.getEffectMonth(),"yyyyMM")
				+"01"; 
		
		/*入账实体设值*/
		PayBookEntity bookIn = new PayBookEntity();
		bookIn.setBeginTime(inDto.getBeginDate());
		bookIn.setEndTime(endTime);
		bookIn.setForeignSn(inDto.getForeignSn());
		bookIn.setForeignTime(inDto.getForeignTime());
		bookIn.setGroupId(inDto.getGroupId());
		bookIn.setLoginNo(inDto.getLoginNo());
		bookIn.setOpCode(inDto.getOpCode());
		bookIn.setOpNote(inDto.getOpNote());
		bookIn.setPayFee(inDto.getYearFee());
		bookIn.setPayMethod("A");
		bookIn.setPayPath("11");
		bookIn.setPayType(inDto.getPayType());
		bookIn.setTotalDate(Integer.parseInt(totalDate));
		bookIn.setYearMonth(Long.parseLong(curYM));
		
		Map<String, Object> inTransCfmMap = new HashMap<String, Object>();
		safeAddToMap(inTransCfmMap, "Header", inDto.getHeader());
		safeAddToMap(inTransCfmMap, "TRANS_TYPE_OBJ", transType); //转账类型实例化对象
		safeAddToMap(inTransCfmMap, "TRANS_IN", transInBaseInfo);  //转入账户基本信息
		safeAddToMap(inTransCfmMap, "TRANS_OUT", transOutBaseInfo); //转出账户基本信息
		safeAddToMap(inTransCfmMap, "BOOK_IN", bookIn); //入账实体
		safeAddToMap(inTransCfmMap, "OP_TYPE", inDto.getOpType()); //转账类型
		safeAddToMap(inTransCfmMap, "IN_PAY_TYPE", inDto.getPayType()); //转账类型
		safeAddToMap(inTransCfmMap, "EFFECT_MONTH", inDto.getEffectMonth());
		safeAddToMap(inTransCfmMap, "BEGIN_DATE", inDto.getBeginDate());
		
		//是否控制专款每月最多消费金额  1控制，0不控制
		if(inDto.getMonthFlag().equals("0")){
			payManage.transBalance(inTransCfmMap, inDto.getPayType());
		}else if(inDto.getMonthFlag().equals("1")){
			
		}
		
		SpecialTransBnCfmOutDTO outDto = new SpecialTransBnCfmOutDTO();
		return outDto;
	}
	
	@Override
	public OutDTO bnCheck(InDTO inParam) {
		
		SpecialTransBnCheckInDTO inDto = (SpecialTransBnCheckInDTO) inParam;
		log.info("bnCfm 入参："+inDto);
		LoginEntity  loginEntity = login.getLoginInfo(inDto.getLoginNo(), inDto.getProvinceId());
		if( StringUtils.isEmptyOrNull(inDto.getGroupId()) ){
			inDto.setGroupId(loginEntity.getGroupId());
		}
		
		/* 获取当前日期 */
		String curTime = control.getSysDate().get("CUR_TIME").toString();

		PubWrtoffCtrlEntity wrtoffCtrlEntity = control.getWriteOffFlagAndMonth();
		if (wrtoffCtrlEntity.getWrtoffFlag().equals("1")) { // 出账期间

			log.info("出账期间，不允许办理包年类业务");
			throw new BusiException(getErrorCode("0000", "00019"), "出账期间不允许办理包年业务！");
		}
		
		/* 创建转账类型 */
		ITransType transType = transFactory.createTransFactory("TransAccountEnt",true);
		
		PayUserBaseEntity transOutBaseInfo= getUserBaseInfo(inDto.getOutPhoneNo(), inDto.getOutContractNo());
		transOutBaseInfo.setNetFlag(true);
		
		/* 取账户可转余额 */
		long remainTransFee = transType.getTranFee(inDto.getOutContractNo());
		log.info("可转余额---->"+remainTransFee);
		
		if(remainTransFee < inDto.getYearFee()){
			throw new BusiException(getErrorCode("0000", "00002"), "可转预存不足，办理业务失败！");
		}
		
		SpecialTransBnCheckOutDTO outDto = new SpecialTransBnCheckOutDTO();
		return outDto;
	}

	@Override
	public OutDTO rollBack(InDTO inParam) {
		// TODO Auto-generated method stub
		SpecialTransRollBackInDTO inDto = (SpecialTransRollBackInDTO) inParam;
		log.info("rollBack 入参："+inDto);
		
		//查询在网用户信息
		UserInfoEntity userEnt = user.getUserInfo(inDto.getOutPhoneNo());
		long idNo =userEnt.getIdNo();
		
		/* 获取当前日期 */
		String curTime = control.getSysDate().get("CUR_TIME").toString();
		String totalDate = curTime.substring(0, 8);
		String curYM = curTime.substring(0, 6);
		
		LoginBaseEntity loginEntity = new LoginBaseEntity();
		loginEntity.setLoginNo(inDto.getLoginNo());
		loginEntity.setGroupId(inDto.getGroupId());
		loginEntity.setOpCode(inDto.getOpCode());
		loginEntity.setOpNote(inDto.getOpNote());
		
		//进行回退
		Map<String, Object> inTransRollBackMap = new HashMap<String, Object>();
		safeAddToMap(inTransRollBackMap, "Header", inDto.getHeader());
		safeAddToMap(inTransRollBackMap, "PAY_SN", inDto.getOrgForeignSn());
		safeAddToMap(inTransRollBackMap, "CUR_TIEM", curTime);
		safeAddToMap(inTransRollBackMap, "TOTAL_DATE", totalDate);
		safeAddToMap(inTransRollBackMap, "CUR_YM", curYM);
		safeAddToMap(inTransRollBackMap, "FOREIGN_SN", inDto.getForeignSn());
		safeAddToMap(inTransRollBackMap, "LOGIN_ENTITY",loginEntity);
		safeAddToMap(inTransRollBackMap, "PAY_METHOD","0");
		safeAddToMap(inTransRollBackMap, "PAY_PATH","11");
		safeAddToMap(inTransRollBackMap, "OUT_CONTRACT_NO", inDto.getOutContractNo());
		
		//预存款校验
		long transFee = payManage.specialTransRollCheck(inTransRollBackMap);
				
		//回退操作，包括回退payment记录
		long rollSn = payManage.specialTransRollBack(inTransRollBackMap);
		
		
		//记录营业员操作记录表
		LoginOprEntity loginOprEnt = new LoginOprEntity();
		loginOprEnt.setBrandId(userEnt.getBrandId());
		loginOprEnt.setIdNo(idNo);
		loginOprEnt.setLoginGroup(inDto.getGroupId());
		loginOprEnt.setLoginNo(inDto.getLoginNo());
		loginOprEnt.setLoginSn(rollSn);
		loginOprEnt.setOpCode(inDto.getOpCode());
		loginOprEnt.setOpTime(curTime);
		loginOprEnt.setPayFee(0);
		loginOprEnt.setPhoneNo(inDto.getOutPhoneNo());
		loginOprEnt.setRemark(inDto.getOpNote());
		loginOprEnt.setPayType("0");
		loginOprEnt.setTotalDate(Long.parseLong(totalDate));
		loginOprEnt.setPayFee(transFee);
		record.saveLoginOpr(loginOprEnt);
		
		SpecialTransRollBackOutDTO outDto = new SpecialTransRollBackOutDTO();
		log.info("rollBack 出参："+outDto);
		return outDto;
	}
	
	
	@Override
	public OutDTO cancelCfm(InDTO inParam) {
		// TODO Auto-generated method stub
		SpecialTransCancelCfmInDTO inDto = (SpecialTransCancelCfmInDTO) inParam;
		log.info("rollBack 入参："+inDto);
		
		/* 家庭生效但宽带未竣工 */
		
		//查询代付账务
		UserInfoEntity userEnt = user.getUserInfo(inDto.getOutPhoneNo());
		long idNo =userEnt.getIdNo();
		
		//取用户资费产品
		//UserPrcEntity userPrcEnt = null;
		//List<UserPrcEntity> listPrd = new ArrayList<UserPrcEntity>();
		//listPrd =  prod.getPdPrcId(idNo,null,null, "true");
		
		
		
		//取家庭套餐月租
		
		
		//更新账本结束时间为当前系统时间
		
		
		SpecialTransCancelCfmOutDTO outDto = new SpecialTransCancelCfmOutDTO();
		log.info("rollBack 出参："+outDto);
		return outDto;
	}
	
	
	
	
	
	// 获取用户基本信息 ,参考8041服务的方法
	private PayUserBaseEntity getUserBaseInfo(String inPhoneNo, long inContractNo) {
			String phoneNo = inPhoneNo;
			long contractNo = inContractNo;
			String conGroup="";
			
			log.info("getUserBaseInfo-->phoneNo:"+phoneNo+",contractNo"+ contractNo);
			
			long idNo = 0;
			String brandId = "";
			
			/* 获取用户信息 */
			UserInfoEntity  userEntity = user.getUserInfo(phoneNo);
			idNo = userEntity.getIdNo();
			if (contractNo == 0) {
				contractNo = userEntity.getContractNo();
			}
			brandId = userEntity.getBrandId();

			/*获取账户信息*/
			ContractInfoEntity conEntity = account.getConInfo(inContractNo);
			conGroup=conEntity.getGroupId();
			
			// 出参信息
			PayUserBaseEntity userBaseInfo = new PayUserBaseEntity();
			userBaseInfo.setBrandId(brandId);
			userBaseInfo.setContractNo(contractNo);
			userBaseInfo.setIdNo(idNo);
			userBaseInfo.setPhoneNo(phoneNo);
			userBaseInfo.setUserGroupId(conGroup);
			return userBaseInfo;
	}

	public ILogin getLogin() {
		return login;
	}

	public void setLogin(ILogin login) {
		this.login = login;
	}

	public IPayManage getPayManage() {
		return payManage;
	}

	public void setPayManage(IPayManage payManage) {
		this.payManage = payManage;
	}

	public IBalance getBalance() {
		return balance;
	}

	public void setBalance(IBalance balance) {
		this.balance = balance;
	}

	public TransFactory getTransFactory() {
		return transFactory;
	}

	public void setTransFactory(TransFactory transFactory) {
		this.transFactory = transFactory;
	}

	public IUser getUser() {
		return user;
	}

	public void setUser(IUser user) {
		this.user = user;
	}

	public IRemainFee getRemainFee() {
		return remainFee;
	}

	public void setRemainFee(IRemainFee remainFee) {
		this.remainFee = remainFee;
	}

	public IAccount getAccount() {
		return account;
	}

	public void setAccount(IAccount account) {
		this.account = account;
	}

	public IControl getControl() {
		return control;
	}

	public void setControl(IControl control) {
		this.control = control;
	}

	public IRecord getRecord() {
		return record;
	}

	public void setRecord(IRecord record) {
		this.record = record;
	}

}
