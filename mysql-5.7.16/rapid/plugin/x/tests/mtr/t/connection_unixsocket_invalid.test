## UNIX Socket connections

## Preamble
--source include/not_windows.inc
--source ../include/have_performance_schema_threads.inc
--source ../include/xplugin_preamble.inc

## Test starts here
--write_file $MYSQL_TMP_DIR/check_unixsocket.tmp
## Test data
#Ensure that each of following uses UNIX Socket
-->stmtsql SELECT CONNECTION_TYPE from performance_schema.threads where processlist_command='Query';
-->recvresult
EOF

--write_file $MYSQL_TMP_DIR/create_socket_on_this_file.tmp
EOF

--write_file $MYSQL_TMP_DIR/check_connection.tmp
EOF

--exec $MYSQLXTEST --socket=$MASTER_X_MYSOCK -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1

# Read only variable 'mysqlx_socket'
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SET GLOBAL mysqlx_socket=null;
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SET @@global.mysqlx_socket='invalid';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SET GLOBAL mysqlx_socket=$MYSQL_TMP_DIR/socket_mysqlx.sock;

call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket .., with:");
call mtr.add_suppression("Plugin mysqlx reported: .UNIX socket path is empty");
let $restart_parameters = restart: --loose-mysqlx-socket=;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1

--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: No such file or directory, while connecting to .+\.sock/ERROR: No such file or directory connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket=$MASTER_X_MYSOCK -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1


call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket ./dev/null/mysqlx\.sock., with:");
call mtr.add_suppression("Plugin mysqlx reported: .could not create UNIX socket lock file /dev/null/mysqlx\.sock\.lock");
let $restart_parameters = restart: --loose-mysqlx-socket="/dev/null/mysqlx.sock";
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: No such file or directory, while connecting to .+\.sock/ERROR: No such file or directory connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket=$MASTER_X_MYSOCK -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1

--replace_regex /ERROR: Not a directory, while connecting to .+\.sock/ERROR: Not a directory, while connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket="/dev/null/mysqlx.sock" -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1

# Use the same socket as mysqld uses
# X Plugin should fail with allocation
--disable_query_log
eval call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket .$MASTER_MYSOCK., with:");
call mtr.add_suppression("Plugin mysqlx reported: .UNIX socket lock file wasn't allocated by X Plugin");
--enable_query_log
UNINSTALL PLUGIN mysqlx;
--replace_regex /loose-mysqlx-socket=.*sock/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MASTER_MYSOCK;
--source include/restart_mysqld.inc

--replace_regex /\.dll/.so/
--eval install plugin mysqlx soname "$MYSQLXPLUGIN"
# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

# Synchronize with the X Plugin
# To be sure that it already tried to create the UNIX socket
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp 2>&1

# The legacy UNIX socket should be still valid
connect(socket_con,localhost,root,,,,$MASTER_MYSOCK);
connection default;
disconnect socket_con;
##TODO check in PFS (when implemented) that the mysqlx UNIX socket isn't there


# Try to use a file as UNIX socket
--replace_regex /loose-mysqlx-socket=.*tmp/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MYSQL_TMP_DIR/create_socket_on_this_file.tmp;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1

--echo Check if mysqlx_socket is set
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) != "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--exec $MYSQLXTEST --socket=$MYSQL_TMP_DIR/create_socket_on_this_file.tmp -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1


# Try to use directory as UNIX socket
call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket ..+/directory., with:");
call mtr.add_suppression("Plugin mysqlx reported: .bind.. on UNIX socket failed: .+/directory ?");
--mkdir $MYSQL_TMP_DIR/directory
--replace_regex /loose-mysqlx-socket=.*directory/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MYSQL_TMP_DIR/directory;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: (Connection refused, while connecting to|Socket operation on non-socket, while connecting to) .+directory/ERROR: Connection refused, while connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket=$MYSQL_TMP_DIR/directory -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1


# Try to create a UNIX socket inside directory without permissions to it
call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket ..+/directory/mysqlx.socket., with:");
call mtr.add_suppression("Plugin mysqlx reported: .could not create UNIX socket lock file .*directory/mysqlx.socket.lock");
--chmod 0000 $MYSQL_TMP_DIR/directory/
--replace_regex /loose-mysqlx-socket=.*socket/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MYSQL_TMP_DIR/directory/mysqlx.socket;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: Permission denied, while connecting to .+\.socket/ERROR: Permission denied, while connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket=$MYSQL_TMP_DIR/directory/mysqlx.socket -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1
--chmod 0777 $MYSQL_TMP_DIR/directory/


call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket ..+/no_existing/mysqlx.socket., with:");
call mtr.add_suppression("Plugin mysqlx reported: .could not create UNIX socket lock file .*no_existing/mysqlx.socket.lock");
--replace_regex /loose-mysqlx-socket=.*socket/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MYSQL_TMP_DIR/directory/no_existing/mysqlx.socket;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: No such file or directory, while connecting to .+\.socket/ERROR: No such file or directory connecting to SOCKET/
--error 1
--exec $MYSQLXTEST --socket=$MYSQL_TMP_DIR/directory/no_existing/mysqlx.socket -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1


--mkdir $MYSQL_TMP_DIR/long_dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
call mtr.add_suppression("Plugin mysqlx reported: .X Plugin failed to setup UNIX socket ..+/mysqlx.socket., with:");
call mtr.add_suppression("Plugin mysqlx reported: .the socket file path is too long");
--replace_regex /loose-mysqlx-socket=.*socket/loose-mysqlx-socket=SOCKET/
let $restart_parameters = restart: --loose-mysqlx-socket=$MYSQL_TMP_DIR/long_dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789/mysqlx.socket;
--source include/restart_mysqld.inc

# Lets sync up with Mysqlx setup
--exec $MYSQLXTEST -uroot --password='' --file=$MYSQL_TMP_DIR/check_connection.tmp -q 2>&1
--echo Check if mysqlx_socket is empty
--disable_query_log
--eval select (IF(VARIABLE_VALUE is NULL, "",VARIABLE_VALUE) = "") as 'result' FROM performance_schema.global_status WHERE VARIABLE_NAME like 'Mysqlx_socket';
--enable_query_log

--replace_regex /ERROR: UNIX Socket file name too long, size should be less or equal [0-9]+/ERROR: UNIX Socket file name too long, size should be less or equal LENGTH/
--error 1
--exec $MYSQLXTEST --socket=$MYSQL_TMP_DIR/long_dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789/mysqlx.socket -uroot --password='' --file=$MYSQL_TMP_DIR/check_unixsocket.tmp 2>&1

## Postamble
--remove_file $MYSQL_TMP_DIR/check_unixsocket.tmp
--remove_file $MYSQL_TMP_DIR/check_connection.tmp
--rmdir $MYSQL_TMP_DIR/directory
--rmdir $MYSQL_TMP_DIR/long_dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789

UNINSTALL PLUGIN mysqlx;
